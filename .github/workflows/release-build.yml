name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for'
        required: true
        type: string

permissions:
  contents: write  # 需要写入权限来创建release
  actions: read    # 需要读取actions权限

jobs:
  release-build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $tag = "${{ github.event.inputs.tag }}"
          } else {
            $tag = "${{ github.ref_name }}"
          }
          
          $version = $tag -replace '^v', ''
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is-prerelease=$($tag -match '-(alpha|beta|rc)')" >> $env:GITHUB_OUTPUT
          
          Write-Host "Tag: $tag"
          Write-Host "Version: $version"

      - name: Setup .NET Framework
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore ppmeta.sln

      - name: Setup certificate for VSTO signing
        shell: pwsh
        env:
          VSTO_CERTIFICATE: ${{ secrets.VSTO_CERTIFICATE }}
          VSTO_CERT_THUMBPRINT: ${{ secrets.VSTO_CERT_THUMBPRINT }}
          VSTO_CERT_PASSWORD: ${{ secrets.VSTO_CERT_PASSWORD }}
        run: |
          if ($env:VSTO_CERTIFICATE) {
            Write-Host "Using production certificate from secrets..."
            
            $certBytes = [System.Convert]::FromBase64String($env:VSTO_CERTIFICATE)
            [System.IO.File]::WriteAllBytes("ppmeta\production_cert.pfx", $certBytes)
            
            echo "CERT_THUMBPRINT=$env:VSTO_CERT_THUMBPRINT" >> $env:GITHUB_ENV
            echo "CERT_PASSWORD=$env:VSTO_CERT_PASSWORD" >> $env:GITHUB_ENV
            echo "CERT_PATH=production_cert.pfx" >> $env:GITHUB_ENV
            echo "IS_PRODUCTION_CERT=true" >> $env:GITHUB_ENV
          } else {
            Write-Host "Warning: No production certificate provided, using temporary certificate..."
            
            $cert = New-SelfSignedCertificate -Subject "CN=PPMeta Release Build" -Type CodeSigning -KeyUsage DigitalSignature -FriendlyName "PPMeta Release Certificate" -CertStoreLocation Cert:\CurrentUser\My -HashAlgorithm SHA256
            
            $pwd = ConvertTo-SecureString -String "TempPassword123!" -Force -AsPlainText
            Export-PfxCertificate -Cert $cert -FilePath "ppmeta\temp_cert.pfx" -Password $pwd
            
            echo "CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
            echo "CERT_PASSWORD=TempPassword123!" >> $env:GITHUB_ENV
            echo "CERT_PATH=temp_cert.pfx" >> $env:GITHUB_ENV
            echo "IS_PRODUCTION_CERT=false" >> $env:GITHUB_ENV
          }

      - name: Install certificate
        shell: pwsh
        run: |
          $certPath = "ppmeta\$env:CERT_PATH"
          $password = ConvertTo-SecureString -String "$env:CERT_PASSWORD" -Force -AsPlainText
          
          $cert = Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $password
          Write-Host "Certificate installed: $($cert.Thumbprint)"
          
          # 导出公钥证书供用户安装
          $publicCertPath = "ppmeta\PPMeta-CodeSigning-Certificate.cer"
          Export-Certificate -Cert $cert -FilePath $publicCertPath -Type CERT
          Write-Host "Public certificate exported: $publicCertPath"
          
          # 创建证书安装说明
          $certType = if ($env:IS_PRODUCTION_CERT -eq "true") { "生产环境" } else { "开发测试" }
          @"
          PPMeta 代码签名证书安装说明
          =====================================
          
          证书类型: $certType 证书
          
          如果您在运行PPMeta时遇到"Windows无法验证此软件的发布者"警告，
          请按照以下步骤安装我们的代码签名证书：
          
          方法1: 双击安装（推荐）
          1. 双击 PPMeta-CodeSigning-Certificate.cer 文件
          2. 点击"安装证书..."
          3. 选择"当前用户"，点击"下一步"
          4. 选择"将所有的证书都放入下列存储"
          5. 点击"浏览..."，选择"受信任的发布者"
          6. 点击"确定"，然后"下一步"，最后"完成"
          
          方法2: 使用PowerShell（管理员权限）
          1. 以管理员身份运行PowerShell
          2. 执行命令：
             Import-Certificate -FilePath "PPMeta-CodeSigning-Certificate.cer" -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
          
          方法3: 使用组策略（企业环境）
          联系您的IT管理员，将此证书添加到"受信任的发布者"组策略中。
          
          注意事项：
          - 安装证书后，PPMeta软件将被Windows信任
          - 此证书仅用于验证PPMeta软件的真实性
          - 如果您不信任此证书，请不要安装
          $(if ($env:IS_PRODUCTION_CERT -eq "false") { "- ⚠️ 这是开发测试证书，不是正式CA颁发的证书" })
          
          证书信息：
          主题: $($cert.Subject)
          指纹: $($cert.Thumbprint)
          有效期: $($cert.NotBefore.ToString('yyyy-MM-dd')) 至 $($cert.NotAfter.ToString('yyyy-MM-dd'))
          "@ | Out-File -FilePath "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt" -Encoding UTF8
          
          $projFile = "ppmeta\ppmeta.csproj"
          $content = Get-Content $projFile -Raw
          $content = $content -replace '<ManifestCertificateThumbprint>.*</ManifestCertificateThumbprint>', "<ManifestCertificateThumbprint>$($cert.Thumbprint)</ManifestCertificateThumbprint>"
          Set-Content $projFile $content
          
          if ($env:IS_PRODUCTION_CERT -eq "false") {
            Write-Host "⚠️ Warning: Using temporary certificate for release build. Consider using a production certificate."
          }

      - name: Setup Visual Studio devenv
        uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: Build installer with dependencies
        shell: pwsh
        run: |
          if (Test-Path "ppSetup\ppSetup.vdproj") {
            Write-Host "Building Visual Studio installer project with devenv..."
            Write-Host "Note: devenv will automatically build ppmeta project dependencies if needed"
            
            try {
              # 使用/build命令，这会自动处理项目依赖关系
              devenv ppmeta.sln /build Release /project ppSetup
              Write-Host "Installer built successfully with dependencies"
              
              # 验证输出文件
              if (Test-Path "ppSetup\Release\ppSetup.msi") {
                Write-Host "✅ MSI installer created: ppSetup\Release\ppSetup.msi"
                $msiSize = (Get-Item "ppSetup\Release\ppSetup.msi").Length
                Write-Host "   File size: $([math]::Round($msiSize/1MB, 2)) MB"
              } else {
                Write-Host "❌ MSI installer not found at expected location"
                Write-Host "Checking alternative locations..."
                Get-ChildItem -Recurse -Filter "*.msi" | ForEach-Object { Write-Host "Found MSI: $($_.FullName)" }
              }
            }
            catch {
              Write-Host "Failed to build installer: $($_.Exception.Message)"
              Write-Host "Checking for partial build outputs..."
              if (Test-Path "ppSetup\Release") {
                Get-ChildItem "ppSetup\Release" | ForEach-Object { Write-Host "   $($_.Name)" }
              }
              throw
            }
          } else {
            Write-Host "No installer project found at ppSetup\ppSetup.vdproj"
          }

      - name: Create release artifacts
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $tag = "${{ steps.version.outputs.tag }}"
          $buildDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
          $commit = git rev-parse HEAD
          
          # 创建两个独立的产物目录
          $msiPackageDir = "PPMeta-MSI-Installer-$version"
          $vstoPackageDir = "PPMeta-VSTO-Package-$version"
          
          New-Item -ItemType Directory -Path $msiPackageDir -Force
          New-Item -ItemType Directory -Path $vstoPackageDir -Force
          
          # 复制共同的证书文件和安装说明
          if (Test-Path "ppmeta\PPMeta-CodeSigning-Certificate.cer") {
            Copy-Item "ppmeta\PPMeta-CodeSigning-Certificate.cer" $msiPackageDir
            Copy-Item "ppmeta\PPMeta-CodeSigning-Certificate.cer" $vstoPackageDir
          }
          if (Test-Path "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt") {
            Copy-Item "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt" $msiPackageDir
            Copy-Item "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt" $vstoPackageDir
          }
          
          # ==================== MSI 安装程序包 ====================
          if (Test-Path "ppSetup\Release\ppSetup.msi") {
            Copy-Item "ppSetup\Release\ppSetup.msi" "$msiPackageDir\PPMeta-$version.msi"
            
            @"
          PPMeta MSI 安装程序包
          ========================================
          
          版本信息:
          - 版本: $version
          - 标签: $tag  
          - 构建时间: $buildDate
          - Git提交: $commit
          
          包含文件:
          - PPMeta-$version.msi: MSI安装程序（Windows Installer格式）
          - PPMeta-CodeSigning-Certificate.cer: 代码签名证书
          - CERTIFICATE_INSTALL_GUIDE.txt: 证书安装详细指南
          
          安装说明:
          1. 【推荐】先安装证书以避免安全警告：
             - 双击 PPMeta-CodeSigning-Certificate.cer
             - 按照 CERTIFICATE_INSTALL_GUIDE.txt 中的详细说明操作
          2. 双击 PPMeta-$version.msi 开始安装
          3. 按照安装向导完成PowerPoint插件安装
          
          适用场景:
          - 个人用户快速安装
          - 企业环境集中部署
          - 支持静默安装参数
          
          系统要求:
          - Windows 10/11
          - Microsoft PowerPoint 2016或更高版本
          - .NET Framework 4.8
          
          安全提醒:
          本软件已经过代码签名，安装证书后Windows将信任PPMeta软件。
          如果不安装证书，可能会收到"Windows无法验证此软件的发布者"警告。
          "@ | Out-File -FilePath "$msiPackageDir\README.txt" -Encoding UTF8
          } else {
            Write-Host "⚠️ Warning: MSI installer not found at ppSetup\Release\ppSetup.msi"
          }
          
          # ==================== VSTO 安装程序包 ====================
          if (Test-Path "ppmeta\bin\Release") {
            # 复制VSTO文件
            Copy-Item "ppmeta\bin\Release\*" $vstoPackageDir -Recurse -Force
            
            # 复制项目文档
            if (Test-Path "README.md") {
              Copy-Item "README.md" $vstoPackageDir
            }
            if (Test-Path "LICENSE") {
              Copy-Item "LICENSE" $vstoPackageDir
            }
            
            @"
          PPMeta VSTO 开发包
          ========================================
          
          版本信息:
          - 版本: $version
          - 标签: $tag
          - 构建时间: $buildDate
          - Git提交: $commit
          
          包含文件:
          - PPMeta.dll: 主要的VSTO程序集
          - PPMeta.vsto: VSTO部署清单文件
          - PPMeta.dll.manifest: 应用程序清单
          - PPMeta-CodeSigning-Certificate.cer: 代码签名证书
          - CERTIFICATE_INSTALL_GUIDE.txt: 证书安装详细指南
          - 其他依赖文件和资源
          
          安装说明:
          1. 【必须】先安装证书：
             - 双击 PPMeta-CodeSigning-Certificate.cer
             - 按照 CERTIFICATE_INSTALL_GUIDE.txt 中的详细说明操作
          2. 双击 PPMeta.vsto 文件进行安装
          3. 如果提示安全警告，点击"安装"
          
          适用场景:
          - 开发人员测试部署
          - 自定义安装需求
          - 网络共享部署
          - ClickOnce部署方式
          
          系统要求:
          - Windows 10/11
          - Microsoft PowerPoint 2016或更高版本
          - .NET Framework 4.8
          - Visual Studio Tools for Office Runtime
          
          技术说明:
          VSTO (Visual Studio Tools for Office) 是微软提供的Office插件开发框架。
          此包包含完整的VSTO部署文件，可用于直接安装或进一步定制部署。
          
          安全提醒:
          VSTO插件必须使用受信任的证书签名才能安装。请务必先安装提供的证书。
          "@ | Out-File -FilePath "$vstoPackageDir\README.txt" -Encoding UTF8
          } else {
            Write-Host "⚠️ Warning: VSTO build output not found at ppmeta\bin\Release"
          }
          
          # 创建ZIP文件
          if (Test-Path $msiPackageDir) {
            Compress-Archive -Path "$msiPackageDir\*" -DestinationPath "$msiPackageDir.zip"
            Write-Host "✅ Created MSI package: $msiPackageDir.zip"
          }
          
          if (Test-Path $vstoPackageDir) {
            Compress-Archive -Path "$vstoPackageDir\*" -DestinationPath "$vstoPackageDir.zip"
            Write-Host "✅ Created VSTO package: $vstoPackageDir.zip"
          }

      - name: Generate release notes
        id: release-notes
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          
          $previousTag = git describe --tags --abbrev=0 HEAD^ 2>$null
          if ($previousTag) {
            Write-Host "Previous tag: $previousTag"
            $commitRange = "$previousTag..HEAD"
          } else {
            Write-Host "No previous tag found, using all commits"
            $commitRange = "HEAD"
          }
          
          $commits = git log $commitRange --pretty=format:"- %s (%h)" --no-merges
          
          $releaseNotes = @"
          ## What's Changed
          
          $commits
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$previousTag...${{ steps.version.outputs.tag }}
          "@
          
          $releaseNotes | Out-File -FilePath "release-notes.txt" -Encoding UTF8
          echo "notes-file=release-notes.txt" >> $env:GITHUB_OUTPUT

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppmeta-release-${{ steps.version.outputs.version }}
          path: |
            PPMeta-MSI-Installer-${{ steps.version.outputs.version }}.zip
            PPMeta-VSTO-Package-${{ steps.version.outputs.version }}.zip
          retention-days: 90

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "PPMeta ${{ steps.version.outputs.version }}"
          body_path: ${{ steps.release-notes.outputs.notes-file }}
          files: |
            PPMeta-MSI-Installer-${{ steps.version.outputs.version }}.zip
            PPMeta-VSTO-Package-${{ steps.version.outputs.version }}.zip
          prerelease: ${{ steps.version.outputs.is-prerelease == 'true' }}
          make_latest: ${{ steps.version.outputs.is-prerelease == 'false' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Notify release
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $isPrerelease = "${{ steps.version.outputs.is-prerelease }}"
          
          if ($isPrerelease -eq "true") {
            Write-Host "🚀 Pre-release $version has been created!"
          } else {
            Write-Host "🎉 Release $version has been created!"
          }
          
          Write-Host "Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
