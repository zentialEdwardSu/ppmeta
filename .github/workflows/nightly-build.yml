name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write  # 需要写入权限来创建release
  actions: read    # 需要读取actions权限

jobs:
  check-commits:
    runs-on: windows-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      commit-count: ${{ steps.check.outputs.commit-count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for commits in last 24 hours
        id: check
        shell: pwsh
        run: |
          $yesterday = (Get-Date).AddDays(-1).ToString("yyyy-MM-dd")
          $commitCount = git rev-list --count --since="$yesterday" HEAD
          Write-Host "Commits in last 24 hours: $commitCount"
          
          if ($commitCount -gt 0) {
            echo "should-build=true" >> $env:GITHUB_OUTPUT
            echo "commit-count=$commitCount" >> $env:GITHUB_OUTPUT
            Write-Host "New commits found, will proceed with nightly build"
          } else {
            echo "should-build=false" >> $env:GITHUB_OUTPUT
            echo "commit-count=0" >> $env:GITHUB_OUTPUT
            Write-Host "No new commits, skipping nightly build"
          }

  nightly-build:
    runs-on: windows-latest
    needs: check-commits
    if: needs.check-commits.outputs.should-build == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Framework
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore ppmeta.sln

      - name: Setup certificate for VSTO signing
        shell: pwsh
        env:
          VSTO_CERTIFICATE: ${{ secrets.VSTO_CERTIFICATE }}
          VSTO_CERT_THUMBPRINT: ${{ secrets.VSTO_CERT_THUMBPRINT }}
          VSTO_CERT_PASSWORD: ${{ secrets.VSTO_CERT_PASSWORD }}
        run: |
          if (-not $env:VSTO_CERTIFICATE) {
            Write-Host "No certificate provided, creating temporary certificate..."
            
            $cert = New-SelfSignedCertificate -Subject "CN=PPMeta CI Build" -Type CodeSigning -KeyUsage DigitalSignature -FriendlyName "PPMeta CI Certificate" -CertStoreLocation Cert:\CurrentUser\My -HashAlgorithm SHA256
            
            $pwd = ConvertTo-SecureString -String "TempPassword123!" -Force -AsPlainText
            Export-PfxCertificate -Cert $cert -FilePath "ppmeta\temp_cert.pfx" -Password $pwd
            
            Write-Host "Temporary certificate created: $($cert.Thumbprint)"
            echo "CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
            echo "CERT_PASSWORD=TempPassword123!" >> $env:GITHUB_ENV
            echo "CERT_PATH=temp_cert.pfx" >> $env:GITHUB_ENV
          } else {
            Write-Host "Using provided certificate from secrets..."
            
            $certBytes = [System.Convert]::FromBase64String($env:VSTO_CERTIFICATE)
            [System.IO.File]::WriteAllBytes("ppmeta\production_cert.pfx", $certBytes)
            
            echo "CERT_THUMBPRINT=$env:VSTO_CERT_THUMBPRINT" >> $env:GITHUB_ENV
            echo "CERT_PASSWORD=$env:VSTO_CERT_PASSWORD" >> $env:GITHUB_ENV
            echo "CERT_PATH=production_cert.pfx" >> $env:GITHUB_ENV
          }

      - name: Install certificate
        shell: pwsh
        run: |
          $certPath = "ppmeta\$env:CERT_PATH"
          $password = ConvertTo-SecureString -String "$env:CERT_PASSWORD" -Force -AsPlainText
          
          $cert = Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $password
          Write-Host "Certificate installed: $($cert.Thumbprint)"
          
          # 导出公钥证书供用户安装
          $publicCertPath = "ppmeta\PPMeta-CodeSigning-Certificate.cer"
          Export-Certificate -Cert $cert -FilePath $publicCertPath -Type CERT
          Write-Host "Public certificate exported: $publicCertPath"
          
          # 创建证书安装说明
          @"
          PPMeta 代码签名证书安装说明
          =====================================
          
          如果您在运行PPMeta时遇到"Windows无法验证此软件的发布者"警告，
          请按照以下步骤安装我们的代码签名证书：
          
          方法1: 双击安装（推荐）
          1. 双击 PPMeta-CodeSigning-Certificate.cer 文件
          2. 点击"安装证书..."
          3. 选择"当前用户"，点击"下一步"
          4. 选择"将所有的证书都放入下列存储"
          5. 点击"浏览..."，选择"受信任的发布者"
          6. 点击"确定"，然后"下一步"，最后"完成"
          
          方法2: 使用PowerShell（管理员权限）
          1. 以管理员身份运行PowerShell
          2. 执行命令：
             Import-Certificate -FilePath "PPMeta-CodeSigning-Certificate.cer" -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
          
          方法3: 使用组策略（企业环境）
          联系您的IT管理员，将此证书添加到"受信任的发布者"组策略中。
          
          注意事项：
          - 安装证书后，PPMeta软件将被Windows信任
          - 此证书仅用于验证PPMeta软件的真实性
          - 如果您不信任此证书，请不要安装
          
          证书信息：
          主题: $($cert.Subject)
          指纹: $($cert.Thumbprint)
          有效期: $($cert.NotBefore.ToString('yyyy-MM-dd')) 至 $($cert.NotAfter.ToString('yyyy-MM-dd'))
          "@ | Out-File -FilePath "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt" -Encoding UTF8
          
          $projFile = "ppmeta\ppmeta.csproj"
          $content = Get-Content $projFile -Raw
          $content = $content -replace '<ManifestCertificateThumbprint>.*</ManifestCertificateThumbprint>', "<ManifestCertificateThumbprint>$($cert.Thumbprint)</ManifestCertificateThumbprint>"
          Set-Content $projFile $content

      - name: Setup Visual Studio devenv
        uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: Build installer with dependencies
        shell: pwsh
        run: |
          if (Test-Path "ppSetup\ppSetup.vdproj") {
            Write-Host "Building Visual Studio installer project with devenv..."
            Write-Host "Note: devenv will automatically build ppmeta project dependencies if needed"
            
            try {
              # 使用/build命令，这会自动处理项目依赖关系
              devenv ppmeta.sln /build Release /project ppSetup
              Write-Host "Installer built successfully with dependencies"
              
              # 验证输出文件
              if (Test-Path "ppSetup\Release\ppSetup.msi") {
                Write-Host "✅ MSI installer created: ppSetup\Release\ppSetup.msi"
                $msiSize = (Get-Item "ppSetup\Release\ppSetup.msi").Length
                Write-Host "   File size: $([math]::Round($msiSize/1MB, 2)) MB"
              } else {
                Write-Host "❌ MSI installer not found at expected location"
                Write-Host "Checking alternative locations..."
                Get-ChildItem -Recurse -Filter "*.msi" | ForEach-Object { Write-Host "Found MSI: $($_.FullName)" }
              }
            }
            catch {
              Write-Host "Failed to build installer: $($_.Exception.Message)"
              Write-Host "Checking for partial build outputs..."
              if (Test-Path "ppSetup\Release") {
                Get-ChildItem "ppSetup\Release" | ForEach-Object { Write-Host "   $($_.Name)" }
              }
              throw
            }
          } else {
            Write-Host "No installer project found at ppSetup\ppSetup.vdproj"
          }

      - name: Get commit info
        id: commit-info
        shell: pwsh
        run: |
          $shortSha = git rev-parse --short HEAD
          $commitDate = git log -1 --format=%cd --date=format:%Y%m%d
          $buildVersion = "$commitDate-$shortSha"
          echo "build-version=$buildVersion" >> $env:GITHUB_OUTPUT
          echo "short-sha=$shortSha" >> $env:GITHUB_OUTPUT

      - name: Create nightly release artifacts
        shell: pwsh
        run: |
          $buildVersion = "${{ steps.commit-info.outputs.build-version }}"
          $buildDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
          $commit = git rev-parse HEAD
          $shortSha = "${{ steps.commit-info.outputs.short-sha }}"
          
          # 创建两个独立的产物目录
          $msiPackageDir = "PPMeta-MSI-Nightly-$buildVersion"
          $vstoPackageDir = "PPMeta-VSTO-Nightly-$buildVersion"
          
          New-Item -ItemType Directory -Path $msiPackageDir -Force
          New-Item -ItemType Directory -Path $vstoPackageDir -Force
          
          # 复制共同的证书文件和安装说明
          if (Test-Path "ppmeta\PPMeta-CodeSigning-Certificate.cer") {
            Copy-Item "ppmeta\PPMeta-CodeSigning-Certificate.cer" $msiPackageDir
            Copy-Item "ppmeta\PPMeta-CodeSigning-Certificate.cer" $vstoPackageDir
          }
          if (Test-Path "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt") {
            Copy-Item "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt" $msiPackageDir
            Copy-Item "ppmeta\CERTIFICATE_INSTALL_GUIDE.txt" $vstoPackageDir
          }
          
          # ==================== MSI 每夜构建包 ====================
          if (Test-Path "ppSetup\Release\ppSetup.msi") {
            Copy-Item "ppSetup\Release\ppSetup.msi" "$msiPackageDir\PPMeta-Nightly-$buildVersion.msi"
            
            @"
          PPMeta MSI 每夜构建包
          ========================================
          
          构建信息:
          - 构建版本: $buildVersion
          - 构建时间: $buildDate
          - Git提交: $commit ($shortSha)
          - 构建类型: 每夜自动构建
          
          包含文件:
          - PPMeta-Nightly-$buildVersion.msi: MSI安装程序
          - PPMeta-CodeSigning-Certificate.cer: 代码签名证书
          - CERTIFICATE_INSTALL_GUIDE.txt: 证书安装详细指南
          
          安装说明:
          1. 【推荐】先安装证书以避免安全警告：
             - 双击 PPMeta-CodeSigning-Certificate.cer
             - 按照 CERTIFICATE_INSTALL_GUIDE.txt 中的详细说明操作
          2. 双击 PPMeta-Nightly-$buildVersion.msi 开始安装
          3. 按照安装向导完成PowerPoint插件安装
          
          ⚠️ 每夜构建警告:
          - 这是自动构建的开发版本，可能包含未测试的功能
          - 不建议在生产环境中使用
          - 可能存在稳定性问题
          - 仅供开发者和测试人员使用
          
          适用场景:
          - 开发者测试最新功能
          - 社区用户尝鲜体验
          - 问题反馈和Bug测试
          
          安全提醒:
          本软件已经过代码签名，安装证书后Windows将信任PPMeta软件。
          "@ | Out-File -FilePath "$msiPackageDir\README.txt" -Encoding UTF8
          } else {
            Write-Host "⚠️ Warning: MSI installer not found"
          }
          
          # ==================== VSTO 每夜构建包 ====================
          if (Test-Path "ppmeta\bin\Release") {
            # 复制VSTO文件
            Copy-Item "ppmeta\bin\Release\*" $vstoPackageDir -Recurse -Force
            
            @"
          PPMeta VSTO 每夜构建包
          ========================================
          
          构建信息:
          - 构建版本: $buildVersion
          - 构建时间: $buildDate
          - Git提交: $commit ($shortSha)
          - 构建类型: 每夜自动构建
          
          包含文件:
          - PPMeta.dll: 主要的VSTO程序集
          - PPMeta.vsto: VSTO部署清单文件
          - PPMeta.dll.manifest: 应用程序清单
          - PPMeta-CodeSigning-Certificate.cer: 代码签名证书
          - CERTIFICATE_INSTALL_GUIDE.txt: 证书安装详细指南
          - 其他依赖文件和资源
          
          安装说明:
          1. 【必须】先安装证书：
             - 双击 PPMeta-CodeSigning-Certificate.cer
             - 按照 CERTIFICATE_INSTALL_GUIDE.txt 中的详细说明操作
          2. 双击 PPMeta.vsto 文件进行安装
          3. 如果提示安全警告，点击"安装"
          
          ⚠️ 每夜构建警告:
          - 这是自动构建的开发版本，可能包含未测试的功能
          - 不建议在生产环境中使用
          - 可能存在稳定性问题
          - 仅供开发者和测试人员使用
          
          适用场景:
          - 开发者测试VSTO部署
          - 自定义安装和配置
          - 网络共享环境测试
          - ClickOnce部署验证
          
          技术说明:
          此包包含最新的VSTO部署文件，适合开发者进行功能测试。
          
          安全提醒:
          VSTO插件必须使用受信任的证书签名才能安装。请务必先安装提供的证书。
          "@ | Out-File -FilePath "$vstoPackageDir\README.txt" -Encoding UTF8
          } else {
            Write-Host "⚠️ Warning: VSTO build output not found"
          }
          
          # 创建ZIP文件
          if (Test-Path $msiPackageDir) {
            Compress-Archive -Path "$msiPackageDir\*" -DestinationPath "$msiPackageDir.zip"
            Write-Host "✅ Created MSI nightly package: $msiPackageDir.zip"
          }
          
          if (Test-Path $vstoPackageDir) {
            Compress-Archive -Path "$vstoPackageDir\*" -DestinationPath "$vstoPackageDir.zip"
            Write-Host "✅ Created VSTO nightly package: $vstoPackageDir.zip"
          }

      - name: Upload nightly build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppmeta-nightly-${{ steps.commit-info.outputs.build-version }}
          path: |
            PPMeta-MSI-Nightly-${{ steps.commit-info.outputs.build-version }}.zip
            PPMeta-VSTO-Nightly-${{ steps.commit-info.outputs.build-version }}.zip
          retention-days: 30

      - name: Get latest commit message
        id: latest-commit
        shell: pwsh
        run: |
          $commitMessage = git log -1 --oneline
          echo "message=$commitMessage" >> $env:GITHUB_OUTPUT

      - name: Create nightly release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly-${{ steps.commit-info.outputs.build-version }}
          name: "Nightly Build ${{ steps.commit-info.outputs.build-version }}"
          body: |
            🌙 **Nightly Build**
            
            This is an automated nightly build containing the latest changes.
            
            **Build Information:**
            - Build Version: `${{ steps.commit-info.outputs.build-version }}`
            - Commit: `${{ steps.commit-info.outputs.short-sha }}`
            - Commits in last 24h: `${{ needs.check-commits.outputs.commit-count }}`
            
            **📦 Package Contents:**
            - **MSI Package**: Complete installer with certificate and guide
            - **VSTO Package**: VSTO deployment files with certificate and guide
            
            **🔧 Installation:**
            1. Download either package based on your needs
            2. Install the certificate first (see included guide)
            3. Run the installer or VSTO deployment
            
            **⚠️ Warning:** This is a development build and may be unstable.
            
            **Latest commit:**
            ```
            ${{ steps.latest-commit.outputs.message }}
            ```
          files: |
            PPMeta-MSI-Nightly-${{ steps.commit-info.outputs.build-version }}.zip
            PPMeta-VSTO-Nightly-${{ steps.commit-info.outputs.build-version }}.zip
          prerelease: true
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
