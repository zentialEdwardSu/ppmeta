name: Build VSTO Installer

on:
#   push:
#     branches: [ master, main, release ]
#   pull_request:
#     branches: [ master, main, release ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.0'
        
    - name: Setup Visual Studio Dev Environment
      uses: seanmiddleditch/gha-setup-vsdevenv@v4
      
    - name: Create certificate file from secret
      shell: pwsh
      run: |
        if ([string]::IsNullOrEmpty("${{ secrets.VSTO_CERTIFICATE }}")) {
          Write-Error "VSTO_CERTIFICATE secret is not set"
          exit 1
        }
        
        Write-Host "Creating certificate file..."
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.VSTO_CERTIFICATE }}")
        $certPath = "${{ github.workspace }}\ppmeta\ppmeta_TemporaryKey.pfx"
        [System.IO.File]::WriteAllBytes($certPath, $certBytes)
        Write-Host "Certificate file created at: $certPath"
        
        # Verify file exists
        if (Test-Path $certPath) {
          Write-Host "Certificate file verified"
          $fileInfo = Get-Item $certPath
          Write-Host "File size: $($fileInfo.Length) bytes"
        } else {
          Write-Error "Certificate file creation failed"
          exit 1
        }
        
    - name: Import VSTO certificate
      shell: pwsh
      run: |
        $certPath = "${{ github.workspace }}\ppmeta\ppmeta_TemporaryKey.pfx"
        Write-Host "Importing certificate from: $certPath"
        
        $Secure_String_Pwd = ConvertTo-SecureString "${{ secrets.VSTO_CERT_PASSWORD }}" -AsPlainText -Force
        try {
          $cert = Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $Secure_String_Pwd
          Write-Host "Certificate imported successfully with thumbprint: $($cert.Thumbprint)"
        } catch {
          Write-Error "Certificate import failed: $($_.Exception.Message)"
          exit 1
        }
        
    - name: Restore NuGet packages
      run: |
        nuget restore "${{ github.workspace }}\ppmeta.sln"
        
    - name: Build VSTO project first
      run: |
        msbuild "${{ github.workspace }}\ppmeta.sln" -t:rebuild -p:Configuration=Release -p:Platform=AnyCPU -p:VisualStudioVersion="17.0" -nologo
        
    - name: DisableOutOfProcBuild Fix for VS2022
      shell: pwsh
      run: |
        function Invoke-DisableOutOfProcBuild {
          param ();
          $visualStudioWherePath = ('{0}/Microsoft Visual Studio/Installer/vswhere.exe' -f ${Env:ProgramFiles(x86)});
          $visualStudioInstallationPath = & $visualStudioWherePath -latest -property 'installationPath';
          
          if ($visualStudioInstallationPath) {
            $currentWorkingDirectory = ('{0}/Common7/IDE/CommonExtensions/Microsoft/VSI/DisableOutOfProcBuild' -f $visualStudioInstallationPath);
            
            if (Test-Path $currentWorkingDirectory) {
              Set-Location -Path $currentWorkingDirectory;
              $disableOutOfProcBuildPath = ('{0}/DisableOutOfProcBuild.exe' -f $currentWorkingDirectory);
              
              if (Test-Path $disableOutOfProcBuildPath) {
                & $disableOutOfProcBuildPath;
                Write-Host "DisableOutOfProcBuild applied successfully"
              } else {
                Write-Host "DisableOutOfProcBuild.exe not found, skipping..."
              }
            } else {
              Write-Host "DisableOutOfProcBuild directory not found, skipping..."
            }
          }
          
          return;
        }
        Invoke-DisableOutOfProcBuild
        
    - name: Build Visual Studio Installer Project
      shell: cmd
      run: |
        echo Building installer project...
        devenv.com "${{ github.workspace }}\ppmeta.sln" /build "Release"
        
    - name: List output files for debugging
      shell: pwsh
      run: |
        Write-Host "Listing ppSetup directory contents:"
        if (Test-Path "${{ github.workspace }}\ppSetup") {
          Get-ChildItem -Path "${{ github.workspace }}\ppSetup" -Recurse
        }
        Write-Host "Listing ppmeta bin directory contents:"
        if (Test-Path "${{ github.workspace }}\ppmeta\bin") {
          Get-ChildItem -Path "${{ github.workspace }}\ppmeta\bin" -Recurse
        }
        
    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: VSTO-Installer
        path: |
          ppSetup/Release/*.msi
          ppSetup/Release/setup.exe
        retention-days: 30
        if-no-files-found: warn
        
    - name: Upload VSTO deployment files
      uses: actions/upload-artifact@v4
      with:
        name: VSTO-Deployment
        path: |
          ppmeta/bin/Release/
        retention-days: 30
        if-no-files-found: warn
        
    - name: Cleanup certificate file
      if: always()
      shell: pwsh
      run: |
        if (Test-Path "${{ github.workspace }}\ppmeta\ppmeta_TemporaryKey.pfx") {
          Remove-Item "${{ github.workspace }}\ppmeta\ppmeta_TemporaryKey.pfx" -Force
          Write-Host "Certificate file cleaned up"
        }
