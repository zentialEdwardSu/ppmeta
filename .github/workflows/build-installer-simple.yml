name: Build Installer

on:
  workflow_call:
    inputs:
      configuration:
        required: true
        type: string
        default: 'Release'
    secrets:
      VSTO_CERTIFICATE:
        required: false
      VSTO_CERT_THUMBPRINT:
        required: false  
      VSTO_CERT_PASSWORD:
        required: false
    outputs:
      installer-path:
        description: "Path to the built installer"
        value: ${{ jobs.build-installer.outputs.installer-path }}
        
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug

jobs:
  build-installer:
    runs-on: windows-latest
    outputs:
      installer-path: ${{ steps.build.outputs.installer-path }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore ppmeta.sln

      - name: Import Certificate
        shell: pwsh
        env:
          VSTO_CERTIFICATE: ${{ secrets.VSTO_CERTIFICATE }}
          VSTO_CERT_PASSWORD: ${{ secrets.VSTO_CERT_PASSWORD }}
        run: |
          if ($env:VSTO_CERTIFICATE) {
            $certBytes = [System.Convert]::FromBase64String($env:VSTO_CERTIFICATE)
            [System.IO.File]::WriteAllBytes("ppmeta\cert.pfx", $certBytes)
            $password = ConvertTo-SecureString "$env:VSTO_CERT_PASSWORD" -AsPlainText -Force
            Import-PfxCertificate -FilePath "ppmeta\cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $password
          } else {
            Write-Host "No certificate provided, using project default"
          }

      - name: DisableOutOfProc Fix
        shell: pwsh
        run: |
          $vsWherePath = "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $vsPath = & $vsWherePath -latest -products * -property 'installationPath'
          $disableOutOfProcPath = "$vsPath\Common7\IDE\CommonExtensions\Microsoft\VSI\DisableOutOfProcBuild"
          if (Test-Path $disableOutOfProcPath) {
            Set-Location $disableOutOfProcPath
            & ".\DisableOutOfProcBuild.exe"
            Write-Host "DisableOutOfProcBuild executed"
          } else {
            Write-Host "DisableOutOfProcBuild not found, skipping"
          }

      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
        
      - name: Build VSTO Project
        run: msbuild ppmeta\ppmeta.csproj -t:rebuild /p:Platform="Any CPU" /p:Configuration="${{ inputs.configuration }}" /p:VisualStudioVersion="17.0" /nologo

      - name: Build Installer
        id: build
        shell: pwsh
        run: |
          $configuration = "${{ inputs.configuration }}"
          devenv.com ppSetup\ppSetup.vdproj /build $configuration
          
          $msiPath = "ppSetup\$configuration\ppSetup.msi"
          if (Test-Path $msiPath) {
            Write-Host "✅ Installer built successfully: $msiPath"
            echo "installer-path=$msiPath" >> $env:GITHUB_OUTPUT
          } else {
            # 查找MSI文件
            $msiFiles = Get-ChildItem -Recurse -Filter "*.msi" -ErrorAction SilentlyContinue
            if ($msiFiles) {
              $msiPath = $msiFiles[0].FullName
              Write-Host "✅ Found installer at: $msiPath"
              echo "installer-path=$msiPath" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "❌ Installer build failed"
              exit 1
            }
          }

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ inputs.configuration }}
          path: ${{ steps.build.outputs.installer-path }}
          retention-days: 30
