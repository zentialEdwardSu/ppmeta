name: Nightly Build

on:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点执行
  workflow_dispatch:     # 手动触发

jobs:
  check-commits:
    runs-on: ubuntu-latest
    outputs:
      has-commits: ${{ steps.check.outputs.has-commits }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for commits in last 24 hours
        id: check
        run: |
          commits=$(git log --since="24 hours ago" --oneline | wc -l)
          if [ $commits -gt 0 ]; then
            echo "has-commits=true" >> $GITHUB_OUTPUT
            echo "Found $commits commits in last 24 hours"
          else
            echo "has-commits=false" >> $GITHUB_OUTPUT
            echo "No commits in last 24 hours"
          fi

  build-installer:
    needs: check-commits
    if: needs.check-commits.outputs.has-commits == 'true'
    uses: ./.github/workflows/build-installer.yml
    with:
      configuration: 'Release'
    secrets:
      VSTO_CERTIFICATE: ${{ secrets.VSTO_CERTIFICATE }}
      VSTO_CERT_THUMBPRINT: ${{ secrets.VSTO_CERT_THUMBPRINT }}
      VSTO_CERT_PASSWORD: ${{ secrets.VSTO_CERT_PASSWORD }}

  create-packages:
    needs: [check-commits, build-installer]
    if: needs.check-commits.outputs.has-commits == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download installer
        uses: actions/download-artifact@v4
        with:
          name: installer-Release
          path: dist/

      - name: Setup certificate files
        shell: bash
        env:
          VSTO_CERTIFICATE: ${{ secrets.VSTO_CERTIFICATE }}
        run: |
          mkdir -p packages
          
          # 导出公钥证书
          if [ -n "$VSTO_CERTIFICATE" ]; then
            echo "$VSTO_CERTIFICATE" | base64 -d > temp.pfx
            openssl pkcs12 -in temp.pfx -nokeys -out packages/PPMeta-Certificate.cer -password pass:"${{ secrets.VSTO_CERT_PASSWORD }}" || true
            rm -f temp.pfx
          fi
          
          # 创建安装指南
          cat > packages/INSTALL_GUIDE.md << 'EOF'
          # PPMeta 安装指南
          
          ## MSI 安装程序
          1. 双击 PPSetup.msi 安装程序
          2. 按照向导完成安装
          
          ## 证书安装（如需要）
          如果遇到安全警告，请安装提供的证书：
          1. 双击 PPMeta-Certificate.cer
          2. 点击"安装证书"
          3. 选择"受信任的发布者"存储
          
          ## VSTO 运行时
          PowerPoint 加载项需要 VSTO 运行时支持，如未安装请访问：
          https://www.microsoft.com/download/details.aspx?id=48217
          EOF

      - name: Create MSI package
        run: |
          cd packages
          cp ../dist/*.msi ./ 2>/dev/null || echo "No MSI files found"
          zip -r ../ppmeta-msi-nightly-${{ github.run_number }}.zip . || true

      - name: Create VSTO package  
        run: |
          mkdir -p vsto-package
          # VSTO相关文件通常在MSI中，这里创建说明
          echo "VSTO 文件包含在 MSI 安装程序中" > vsto-package/README.txt
          cp packages/*.cer vsto-package/ 2>/dev/null || true
          cp packages/INSTALL_GUIDE.md vsto-package/ || true
          zip -r ppmeta-vsto-nightly-${{ github.run_number }}.zip vsto-package/ || true

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: nightly-packages
          path: |
            ppmeta-msi-nightly-${{ github.run_number }}.zip
            ppmeta-vsto-nightly-${{ github.run_number }}.zip
          retention-days: 7
