name: Simple VSTO Build

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup VS Dev Environment
      uses: seanmiddleditch/gha-setup-vsdevenv@v4
      
    - name: Import Certificate
      shell: pwsh
      run: |
        if ([string]::IsNullOrEmpty("${{ secrets.VSTO_CERTIFICATE }}")) {
          Write-Error "VSTO_CERTIFICATE secret is not set"
          exit 1
        }

        if ([string]::IsNullOrEmpty("${{ secrets.VSTO_CERT_PASSWORD }}")) {
          Write-Error "VSTO_CERT_PASSWORD secret is not set"
          exit 1
        }
        
        Write-Host "Creating certificate file..."
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.VSTO_CERTIFICATE }}")
        $certPath = "${{ github.workspace }}\ppmeta\ppmeta_TemporaryKey.pfx"
        [System.IO.File]::WriteAllBytes($certPath, $certBytes)
        Write-Host "Certificate file created at: $certPath"
        
        # Verify file exists
        if (Test-Path $certPath) {
          Write-Host "Certificate file verified"
          $fileInfo = Get-Item $certPath
          Write-Host "File size: $($fileInfo.Length) bytes"
        } else {
          Write-Error "Certificate file creation failed"
          exit 1
        }
        
        Write-Host "Importing certificate using certutil..."
        try {
          $certPassword = "${{ secrets.VSTO_CERT_PASSWORD }}"

          $result = cmd /c "certutil -f -p `"$certPassword`" -importpfx `"$certPath`""
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Certificate imported successfully using certutil"
            Write-Host "certutil output: $result"
          } else {
            Write-Error "certutil failed with exit code: $LASTEXITCODE"
            Write-Error "certutil output: $result"
            exit 1
          }
        } catch {
          Write-Error "Certificate import failed: $($_.Exception.Message)"
          exit 1
        }
        
    - name: Restore packages
      run: nuget restore "${{ github.workspace }}\ppmeta.sln"
      
    - name: Check project configuration
      shell: pwsh
      run: |
        Write-Host "Workspace directory contents:"
        Get-ChildItem -Path "${{ github.workspace }}" -Name
        Write-Host "ppmeta directory contents:"
        Get-ChildItem -Path "${{ github.workspace }}\ppmeta" -Name
        Write-Host "Checking project file..."
        if (Test-Path "${{ github.workspace }}\ppmeta\ppmeta.sln") {
          Write-Host "Project file exists"
        } else {
          Write-Host "Project file NOT found"
        }
        
    - name: Build VSTO
      run: msbuild "${{ github.workspace }}\ppmeta\ppmeta.sln" -p:Configuration=Release -p:Platform="Any CPU" -p:VisualStudioVersion="17.0" -nologo
        
    - name: Build Installer
      run: devenv.com "${{ github.workspace }}\ppSetup\ppSetup.vdproj" /build "Release"

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: Installer
        path: ppSetup/Release/
        
    - name: Cleanup
      if: always()
      shell: pwsh
      run: Remove-Item "${{ github.workspace }}\ppmeta\ppmeta_TemporaryKey.pfx" -ErrorAction SilentlyContinue
